// Generated from ./grammar/biesC.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,47,312,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,1,0,1,0,1,1,1,1,1,2,
1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,8,
1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,
1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,
22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
1,26,1,26,5,26,194,8,26,10,26,12,26,197,9,26,1,26,1,26,1,27,3,27,202,8,27,
1,27,4,27,205,8,27,11,27,12,27,206,1,27,1,27,4,27,211,8,27,11,27,12,27,212,
3,27,215,8,27,1,27,1,27,3,27,219,8,27,1,27,4,27,222,8,27,11,27,12,27,223,
3,27,226,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,5,29,236,8,29,10,29,
12,29,239,9,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,
35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,
1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,3,43,275,8,43,1,43,1,43,1,43,1,43,
1,44,4,44,282,8,44,11,44,12,44,283,1,44,1,44,1,45,1,45,1,45,1,45,5,45,292,
8,45,10,45,12,45,295,9,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,303,8,46,10,
46,12,46,306,9,46,1,46,1,46,1,46,1,46,1,46,1,304,0,47,1,1,3,2,5,3,7,4,9,
5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
42,85,43,87,44,89,45,91,46,93,47,1,0,8,3,0,10,10,13,13,34,34,2,0,43,43,45,
45,1,0,48,57,2,0,69,69,101,101,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,324,0,1,1,0,0,0,0,3,1,0,0,
0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,
1,95,1,0,0,0,3,97,1,0,0,0,5,99,1,0,0,0,7,103,1,0,0,0,9,105,1,0,0,0,11,108,
1,0,0,0,13,111,1,0,0,0,15,115,1,0,0,0,17,117,1,0,0,0,19,119,1,0,0,0,21,121,
1,0,0,0,23,124,1,0,0,0,25,130,1,0,0,0,27,132,1,0,0,0,29,134,1,0,0,0,31,137,
1,0,0,0,33,142,1,0,0,0,35,147,1,0,0,0,37,152,1,0,0,0,39,157,1,0,0,0,41,163,
1,0,0,0,43,168,1,0,0,0,45,174,1,0,0,0,47,178,1,0,0,0,49,182,1,0,0,0,51,187,
1,0,0,0,53,191,1,0,0,0,55,201,1,0,0,0,57,227,1,0,0,0,59,233,1,0,0,0,61,240,
1,0,0,0,63,242,1,0,0,0,65,244,1,0,0,0,67,246,1,0,0,0,69,248,1,0,0,0,71,251,
1,0,0,0,73,254,1,0,0,0,75,257,1,0,0,0,77,260,1,0,0,0,79,263,1,0,0,0,81,265,
1,0,0,0,83,267,1,0,0,0,85,270,1,0,0,0,87,274,1,0,0,0,89,281,1,0,0,0,91,287,
1,0,0,0,93,298,1,0,0,0,95,96,5,40,0,0,96,2,1,0,0,0,97,98,5,41,0,0,98,4,1,
0,0,0,99,100,5,108,0,0,100,101,5,101,0,0,101,102,5,116,0,0,102,6,1,0,0,0,
103,104,5,61,0,0,104,8,1,0,0,0,105,106,5,40,0,0,106,107,5,41,0,0,107,10,
1,0,0,0,108,109,5,61,0,0,109,110,5,62,0,0,110,12,1,0,0,0,111,112,5,102,0,
0,112,113,5,117,0,0,113,114,5,110,0,0,114,14,1,0,0,0,115,116,5,44,0,0,116,
16,1,0,0,0,117,118,5,123,0,0,118,18,1,0,0,0,119,120,5,125,0,0,120,20,1,0,
0,0,121,122,5,105,0,0,122,123,5,110,0,0,123,22,1,0,0,0,124,125,5,99,0,0,
125,126,5,111,0,0,126,127,5,110,0,0,127,128,5,115,0,0,128,129,5,116,0,0,
129,24,1,0,0,0,130,131,5,91,0,0,131,26,1,0,0,0,132,133,5,93,0,0,133,28,1,
0,0,0,134,135,5,105,0,0,135,136,5,102,0,0,136,30,1,0,0,0,137,138,5,116,0,
0,138,139,5,104,0,0,139,140,5,101,0,0,140,141,5,110,0,0,141,32,1,0,0,0,142,
143,5,101,0,0,143,144,5,108,0,0,144,145,5,115,0,0,145,146,5,101,0,0,146,
34,1,0,0,0,147,148,5,98,0,0,148,149,5,111,0,0,149,150,5,111,0,0,150,151,
5,108,0,0,151,36,1,0,0,0,152,153,5,116,0,0,153,154,5,114,0,0,154,155,5,117,
0,0,155,156,5,101,0,0,156,38,1,0,0,0,157,158,5,102,0,0,158,159,5,97,0,0,
159,160,5,108,0,0,160,161,5,115,0,0,161,162,5,101,0,0,162,40,1,0,0,0,163,
164,5,110,0,0,164,165,5,111,0,0,165,166,5,110,0,0,166,167,5,101,0,0,167,
42,1,0,0,0,168,169,5,105,0,0,169,170,5,110,0,0,170,171,5,112,0,0,171,172,
5,117,0,0,172,173,5,116,0,0,173,44,1,0,0,0,174,175,5,105,0,0,175,176,5,110,
0,0,176,177,5,116,0,0,177,46,1,0,0,0,178,179,5,115,0,0,179,180,5,116,0,0,
180,181,5,114,0,0,181,48,1,0,0,0,182,183,5,108,0,0,183,184,5,105,0,0,184,
185,5,115,0,0,185,186,5,116,0,0,186,50,1,0,0,0,187,188,5,108,0,0,188,189,
5,101,0,0,189,190,5,110,0,0,190,52,1,0,0,0,191,195,5,34,0,0,192,194,8,0,
0,0,193,192,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,
198,1,0,0,0,197,195,1,0,0,0,198,199,5,34,0,0,199,54,1,0,0,0,200,202,7,1,
0,0,201,200,1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,0,203,205,7,2,0,0,204,
203,1,0,0,0,205,206,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,214,1,0,
0,0,208,210,5,46,0,0,209,211,7,2,0,0,210,209,1,0,0,0,211,212,1,0,0,0,212,
210,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,208,1,0,0,0,214,215,1,0,
0,0,215,225,1,0,0,0,216,218,7,3,0,0,217,219,7,1,0,0,218,217,1,0,0,0,218,
219,1,0,0,0,219,221,1,0,0,0,220,222,7,2,0,0,221,220,1,0,0,0,222,223,1,0,
0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,226,1,0,0,0,225,216,1,0,0,0,225,
226,1,0,0,0,226,56,1,0,0,0,227,228,5,112,0,0,228,229,5,114,0,0,229,230,5,
105,0,0,230,231,5,110,0,0,231,232,5,116,0,0,232,58,1,0,0,0,233,237,7,4,0,
0,234,236,7,5,0,0,235,234,1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,0,237,238,
1,0,0,0,238,60,1,0,0,0,239,237,1,0,0,0,240,241,5,42,0,0,241,62,1,0,0,0,242,
243,5,47,0,0,243,64,1,0,0,0,244,245,5,43,0,0,245,66,1,0,0,0,246,247,5,45,
0,0,247,68,1,0,0,0,248,249,5,42,0,0,249,250,5,42,0,0,250,70,1,0,0,0,251,
252,5,38,0,0,252,253,5,38,0,0,253,72,1,0,0,0,254,255,5,124,0,0,255,256,5,
124,0,0,256,74,1,0,0,0,257,258,5,61,0,0,258,259,5,61,0,0,259,76,1,0,0,0,
260,261,5,33,0,0,261,262,5,61,0,0,262,78,1,0,0,0,263,264,5,60,0,0,264,80,
1,0,0,0,265,266,5,62,0,0,266,82,1,0,0,0,267,268,5,60,0,0,268,269,5,61,0,
0,269,84,1,0,0,0,270,271,5,62,0,0,271,272,5,61,0,0,272,86,1,0,0,0,273,275,
5,13,0,0,274,273,1,0,0,0,274,275,1,0,0,0,275,276,1,0,0,0,276,277,5,10,0,
0,277,278,1,0,0,0,278,279,6,43,0,0,279,88,1,0,0,0,280,282,7,6,0,0,281,280,
1,0,0,0,282,283,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,0,
285,286,6,44,0,0,286,90,1,0,0,0,287,288,5,47,0,0,288,289,5,47,0,0,289,293,
1,0,0,0,290,292,8,7,0,0,291,290,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,
293,294,1,0,0,0,294,296,1,0,0,0,295,293,1,0,0,0,296,297,6,45,0,0,297,92,
1,0,0,0,298,299,5,47,0,0,299,300,5,42,0,0,300,304,1,0,0,0,301,303,9,0,0,
0,302,301,1,0,0,0,303,306,1,0,0,0,304,305,1,0,0,0,304,302,1,0,0,0,305,307,
1,0,0,0,306,304,1,0,0,0,307,308,5,42,0,0,308,309,5,47,0,0,309,310,1,0,0,
0,310,311,6,46,0,0,311,94,1,0,0,0,14,0,195,201,206,212,214,218,223,225,237,
274,283,293,304,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class biesCLexer extends antlr4.Lexer {

    static grammarFileName = "biesC.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'('", "')'", "'let'", "'='", "'()'", "'=>'", 
                         "'fun'", "','", "'{'", "'}'", "'in'", "'const'", 
                         "'['", "']'", "'if'", "'then'", "'else'", "'bool'", 
                         "'true'", "'false'", "'none'", "'input'", "'int'", 
                         "'str'", "'list'", "'len'", null, null, "'print'", 
                         null, "'*'", "'/'", "'+'", "'-'", "'**'", "'&&'", 
                         "'||'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, "BOOL", "TRUE", "FALSE", "NULL", "INPUT", 
                          "INT", "STR", "LIST", "LEN", "STRING", "NUMBER", 
                          "PRINT", "ID", "MULT", "DIV", "ADD", "SUB", "POW", 
                          "AND", "OR", "EQ", "NEQ", "LT", "GT", "LE", "GE", 
                          "NL", "WS", "COMMENT", "MULTILINE_COMMENT" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "BOOL", "TRUE", 
                      "FALSE", "NULL", "INPUT", "INT", "STR", "LIST", "LEN", 
                      "STRING", "NUMBER", "PRINT", "ID", "MULT", "DIV", 
                      "ADD", "SUB", "POW", "AND", "OR", "EQ", "NEQ", "LT", 
                      "GT", "LE", "GE", "NL", "WS", "COMMENT", "MULTILINE_COMMENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

biesCLexer.EOF = antlr4.Token.EOF;
biesCLexer.T__0 = 1;
biesCLexer.T__1 = 2;
biesCLexer.T__2 = 3;
biesCLexer.T__3 = 4;
biesCLexer.T__4 = 5;
biesCLexer.T__5 = 6;
biesCLexer.T__6 = 7;
biesCLexer.T__7 = 8;
biesCLexer.T__8 = 9;
biesCLexer.T__9 = 10;
biesCLexer.T__10 = 11;
biesCLexer.T__11 = 12;
biesCLexer.T__12 = 13;
biesCLexer.T__13 = 14;
biesCLexer.T__14 = 15;
biesCLexer.T__15 = 16;
biesCLexer.T__16 = 17;
biesCLexer.BOOL = 18;
biesCLexer.TRUE = 19;
biesCLexer.FALSE = 20;
biesCLexer.NULL = 21;
biesCLexer.INPUT = 22;
biesCLexer.INT = 23;
biesCLexer.STR = 24;
biesCLexer.LIST = 25;
biesCLexer.LEN = 26;
biesCLexer.STRING = 27;
biesCLexer.NUMBER = 28;
biesCLexer.PRINT = 29;
biesCLexer.ID = 30;
biesCLexer.MULT = 31;
biesCLexer.DIV = 32;
biesCLexer.ADD = 33;
biesCLexer.SUB = 34;
biesCLexer.POW = 35;
biesCLexer.AND = 36;
biesCLexer.OR = 37;
biesCLexer.EQ = 38;
biesCLexer.NEQ = 39;
biesCLexer.LT = 40;
biesCLexer.GT = 41;
biesCLexer.LE = 42;
biesCLexer.GE = 43;
biesCLexer.NL = 44;
biesCLexer.WS = 45;
biesCLexer.COMMENT = 46;
biesCLexer.MULTILINE_COMMENT = 47;



