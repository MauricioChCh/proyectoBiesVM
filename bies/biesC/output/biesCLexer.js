// Generated from ./grammar/biesC.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,33,220,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,1,1,1,
1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
5,13,105,8,13,10,13,12,13,108,9,13,1,13,1,13,1,14,3,14,113,8,14,1,14,4,14,
116,8,14,11,14,12,14,117,1,14,1,14,4,14,122,8,14,11,14,12,14,123,3,14,126,
8,14,1,14,1,14,3,14,130,8,14,1,14,4,14,133,8,14,11,14,12,14,134,3,14,137,
8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,5,16,147,8,16,10,16,12,16,150,
9,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,
22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,
1,28,1,28,1,29,3,29,183,8,29,1,29,1,29,1,29,1,29,1,30,4,30,190,8,30,11,30,
12,30,191,1,30,1,30,1,31,1,31,1,31,1,31,5,31,200,8,31,10,31,12,31,203,9,
31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,211,8,32,10,32,12,32,214,9,32,1,32,
1,32,1,32,1,32,1,32,1,212,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,1,0,
8,3,0,10,10,13,13,34,34,2,0,43,43,45,45,1,0,48,57,2,0,69,69,101,101,3,0,
65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,
10,10,13,13,232,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
0,0,1,67,1,0,0,0,3,69,1,0,0,0,5,71,1,0,0,0,7,75,1,0,0,0,9,77,1,0,0,0,11,
80,1,0,0,0,13,83,1,0,0,0,15,85,1,0,0,0,17,87,1,0,0,0,19,89,1,0,0,0,21,92,
1,0,0,0,23,98,1,0,0,0,25,100,1,0,0,0,27,102,1,0,0,0,29,112,1,0,0,0,31,138,
1,0,0,0,33,144,1,0,0,0,35,151,1,0,0,0,37,153,1,0,0,0,39,155,1,0,0,0,41,157,
1,0,0,0,43,159,1,0,0,0,45,162,1,0,0,0,47,165,1,0,0,0,49,168,1,0,0,0,51,171,
1,0,0,0,53,173,1,0,0,0,55,175,1,0,0,0,57,178,1,0,0,0,59,182,1,0,0,0,61,189,
1,0,0,0,63,195,1,0,0,0,65,206,1,0,0,0,67,68,5,40,0,0,68,2,1,0,0,0,69,70,
5,41,0,0,70,4,1,0,0,0,71,72,5,108,0,0,72,73,5,101,0,0,73,74,5,116,0,0,74,
6,1,0,0,0,75,76,5,61,0,0,76,8,1,0,0,0,77,78,5,40,0,0,78,79,5,41,0,0,79,10,
1,0,0,0,80,81,5,61,0,0,81,82,5,62,0,0,82,12,1,0,0,0,83,84,5,44,0,0,84,14,
1,0,0,0,85,86,5,123,0,0,86,16,1,0,0,0,87,88,5,125,0,0,88,18,1,0,0,0,89,90,
5,105,0,0,90,91,5,110,0,0,91,20,1,0,0,0,92,93,5,99,0,0,93,94,5,111,0,0,94,
95,5,110,0,0,95,96,5,115,0,0,96,97,5,116,0,0,97,22,1,0,0,0,98,99,5,91,0,
0,99,24,1,0,0,0,100,101,5,93,0,0,101,26,1,0,0,0,102,106,5,34,0,0,103,105,
8,0,0,0,104,103,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,
107,109,1,0,0,0,108,106,1,0,0,0,109,110,5,34,0,0,110,28,1,0,0,0,111,113,
7,1,0,0,112,111,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,116,7,2,0,0,
115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,125,
1,0,0,0,119,121,5,46,0,0,120,122,7,2,0,0,121,120,1,0,0,0,122,123,1,0,0,0,
123,121,1,0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,119,1,0,0,0,125,126,
1,0,0,0,126,136,1,0,0,0,127,129,7,3,0,0,128,130,7,1,0,0,129,128,1,0,0,0,
129,130,1,0,0,0,130,132,1,0,0,0,131,133,7,2,0,0,132,131,1,0,0,0,133,134,
1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,137,1,0,0,0,136,127,1,0,0,0,
136,137,1,0,0,0,137,30,1,0,0,0,138,139,5,112,0,0,139,140,5,114,0,0,140,141,
5,105,0,0,141,142,5,110,0,0,142,143,5,116,0,0,143,32,1,0,0,0,144,148,7,4,
0,0,145,147,7,5,0,0,146,145,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,
149,1,0,0,0,149,34,1,0,0,0,150,148,1,0,0,0,151,152,5,42,0,0,152,36,1,0,0,
0,153,154,5,47,0,0,154,38,1,0,0,0,155,156,5,43,0,0,156,40,1,0,0,0,157,158,
5,45,0,0,158,42,1,0,0,0,159,160,5,38,0,0,160,161,5,38,0,0,161,44,1,0,0,0,
162,163,5,124,0,0,163,164,5,124,0,0,164,46,1,0,0,0,165,166,5,61,0,0,166,
167,5,61,0,0,167,48,1,0,0,0,168,169,5,33,0,0,169,170,5,61,0,0,170,50,1,0,
0,0,171,172,5,60,0,0,172,52,1,0,0,0,173,174,5,62,0,0,174,54,1,0,0,0,175,
176,5,60,0,0,176,177,5,61,0,0,177,56,1,0,0,0,178,179,5,62,0,0,179,180,5,
61,0,0,180,58,1,0,0,0,181,183,5,13,0,0,182,181,1,0,0,0,182,183,1,0,0,0,183,
184,1,0,0,0,184,185,5,10,0,0,185,186,1,0,0,0,186,187,6,29,0,0,187,60,1,0,
0,0,188,190,7,6,0,0,189,188,1,0,0,0,190,191,1,0,0,0,191,189,1,0,0,0,191,
192,1,0,0,0,192,193,1,0,0,0,193,194,6,30,0,0,194,62,1,0,0,0,195,196,5,47,
0,0,196,197,5,47,0,0,197,201,1,0,0,0,198,200,8,7,0,0,199,198,1,0,0,0,200,
203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,0,203,201,1,0,
0,0,204,205,6,31,0,0,205,64,1,0,0,0,206,207,5,47,0,0,207,208,5,42,0,0,208,
212,1,0,0,0,209,211,9,0,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,213,1,0,
0,0,212,210,1,0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,215,216,5,42,0,0,216,
217,5,47,0,0,217,218,1,0,0,0,218,219,6,32,0,0,219,66,1,0,0,0,14,0,106,112,
117,123,125,129,134,136,148,182,191,201,212,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class biesCLexer extends antlr4.Lexer {

    static grammarFileName = "biesC.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'('", "')'", "'let'", "'='", "'()'", "'=>'", 
                         "','", "'{'", "'}'", "'in'", "'const'", "'['", 
                         "']'", null, null, "'print'", null, "'*'", "'/'", 
                         "'+'", "'-'", "'&&'", "'||'", "'=='", "'!='", "'<'", 
                         "'>'", "'<='", "'>='" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, "STRING", 
                          "NUMBER", "PRINT", "ID", "MULT", "DIV", "ADD", 
                          "SUB", "AND", "OR", "EQ", "NEQ", "LT", "GT", "LE", 
                          "GE", "NL", "WS", "COMMENT", "MULTILINE_COMMENT" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "STRING", "NUMBER", "PRINT", "ID", "MULT", "DIV", 
                      "ADD", "SUB", "AND", "OR", "EQ", "NEQ", "LT", "GT", 
                      "LE", "GE", "NL", "WS", "COMMENT", "MULTILINE_COMMENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

biesCLexer.EOF = antlr4.Token.EOF;
biesCLexer.T__0 = 1;
biesCLexer.T__1 = 2;
biesCLexer.T__2 = 3;
biesCLexer.T__3 = 4;
biesCLexer.T__4 = 5;
biesCLexer.T__5 = 6;
biesCLexer.T__6 = 7;
biesCLexer.T__7 = 8;
biesCLexer.T__8 = 9;
biesCLexer.T__9 = 10;
biesCLexer.T__10 = 11;
biesCLexer.T__11 = 12;
biesCLexer.T__12 = 13;
biesCLexer.STRING = 14;
biesCLexer.NUMBER = 15;
biesCLexer.PRINT = 16;
biesCLexer.ID = 17;
biesCLexer.MULT = 18;
biesCLexer.DIV = 19;
biesCLexer.ADD = 20;
biesCLexer.SUB = 21;
biesCLexer.AND = 22;
biesCLexer.OR = 23;
biesCLexer.EQ = 24;
biesCLexer.NEQ = 25;
biesCLexer.LT = 26;
biesCLexer.GT = 27;
biesCLexer.LE = 28;
biesCLexer.GE = 29;
biesCLexer.NL = 30;
biesCLexer.WS = 31;
biesCLexer.COMMENT = 32;
biesCLexer.MULTILINE_COMMENT = 33;



