// Generated from ./grammar/biesC.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,42,282,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,
6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,
12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,
18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
1,21,1,21,1,22,1,22,5,22,167,8,22,10,22,12,22,170,9,22,1,22,1,22,1,23,3,
23,175,8,23,1,23,4,23,178,8,23,11,23,12,23,179,1,23,1,23,4,23,184,8,23,11,
23,12,23,185,3,23,188,8,23,1,23,1,23,3,23,192,8,23,1,23,4,23,195,8,23,11,
23,12,23,196,3,23,199,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,5,25,
209,8,25,10,25,12,25,212,9,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,
30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,
1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,3,38,245,8,38,1,38,1,38,1,38,1,38,
1,39,4,39,252,8,39,11,39,12,39,253,1,39,1,39,1,40,1,40,1,40,1,40,5,40,262,
8,40,10,40,12,40,265,9,40,1,40,1,40,1,41,1,41,1,41,1,41,5,41,273,8,41,10,
41,12,41,276,9,41,1,41,1,41,1,41,1,41,1,41,1,274,0,42,1,1,3,2,5,3,7,4,9,
5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
42,1,0,8,3,0,10,10,13,13,34,34,2,0,43,43,45,45,1,0,48,57,2,0,69,69,101,101,
3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,
2,0,10,10,13,13,294,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,
0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,87,1,
0,0,0,5,89,1,0,0,0,7,93,1,0,0,0,9,95,1,0,0,0,11,98,1,0,0,0,13,101,1,0,0,
0,15,103,1,0,0,0,17,105,1,0,0,0,19,107,1,0,0,0,21,110,1,0,0,0,23,116,1,0,
0,0,25,118,1,0,0,0,27,120,1,0,0,0,29,125,1,0,0,0,31,130,1,0,0,0,33,136,1,
0,0,0,35,141,1,0,0,0,37,147,1,0,0,0,39,151,1,0,0,0,41,155,1,0,0,0,43,160,
1,0,0,0,45,164,1,0,0,0,47,174,1,0,0,0,49,200,1,0,0,0,51,206,1,0,0,0,53,213,
1,0,0,0,55,215,1,0,0,0,57,217,1,0,0,0,59,219,1,0,0,0,61,221,1,0,0,0,63,224,
1,0,0,0,65,227,1,0,0,0,67,230,1,0,0,0,69,233,1,0,0,0,71,235,1,0,0,0,73,237,
1,0,0,0,75,240,1,0,0,0,77,244,1,0,0,0,79,251,1,0,0,0,81,257,1,0,0,0,83,268,
1,0,0,0,85,86,5,40,0,0,86,2,1,0,0,0,87,88,5,41,0,0,88,4,1,0,0,0,89,90,5,
108,0,0,90,91,5,101,0,0,91,92,5,116,0,0,92,6,1,0,0,0,93,94,5,61,0,0,94,8,
1,0,0,0,95,96,5,40,0,0,96,97,5,41,0,0,97,10,1,0,0,0,98,99,5,61,0,0,99,100,
5,62,0,0,100,12,1,0,0,0,101,102,5,44,0,0,102,14,1,0,0,0,103,104,5,123,0,
0,104,16,1,0,0,0,105,106,5,125,0,0,106,18,1,0,0,0,107,108,5,105,0,0,108,
109,5,110,0,0,109,20,1,0,0,0,110,111,5,99,0,0,111,112,5,111,0,0,112,113,
5,110,0,0,113,114,5,115,0,0,114,115,5,116,0,0,115,22,1,0,0,0,116,117,5,91,
0,0,117,24,1,0,0,0,118,119,5,93,0,0,119,26,1,0,0,0,120,121,5,98,0,0,121,
122,5,111,0,0,122,123,5,111,0,0,123,124,5,108,0,0,124,28,1,0,0,0,125,126,
5,116,0,0,126,127,5,114,0,0,127,128,5,117,0,0,128,129,5,101,0,0,129,30,1,
0,0,0,130,131,5,102,0,0,131,132,5,97,0,0,132,133,5,108,0,0,133,134,5,115,
0,0,134,135,5,101,0,0,135,32,1,0,0,0,136,137,5,110,0,0,137,138,5,117,0,0,
138,139,5,108,0,0,139,140,5,108,0,0,140,34,1,0,0,0,141,142,5,105,0,0,142,
143,5,110,0,0,143,144,5,112,0,0,144,145,5,117,0,0,145,146,5,116,0,0,146,
36,1,0,0,0,147,148,5,105,0,0,148,149,5,110,0,0,149,150,5,116,0,0,150,38,
1,0,0,0,151,152,5,115,0,0,152,153,5,116,0,0,153,154,5,114,0,0,154,40,1,0,
0,0,155,156,5,108,0,0,156,157,5,105,0,0,157,158,5,115,0,0,158,159,5,116,
0,0,159,42,1,0,0,0,160,161,5,108,0,0,161,162,5,101,0,0,162,163,5,110,0,0,
163,44,1,0,0,0,164,168,5,34,0,0,165,167,8,0,0,0,166,165,1,0,0,0,167,170,
1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,0,0,0,
171,172,5,34,0,0,172,46,1,0,0,0,173,175,7,1,0,0,174,173,1,0,0,0,174,175,
1,0,0,0,175,177,1,0,0,0,176,178,7,2,0,0,177,176,1,0,0,0,178,179,1,0,0,0,
179,177,1,0,0,0,179,180,1,0,0,0,180,187,1,0,0,0,181,183,5,46,0,0,182,184,
7,2,0,0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,
186,188,1,0,0,0,187,181,1,0,0,0,187,188,1,0,0,0,188,198,1,0,0,0,189,191,
7,3,0,0,190,192,7,1,0,0,191,190,1,0,0,0,191,192,1,0,0,0,192,194,1,0,0,0,
193,195,7,2,0,0,194,193,1,0,0,0,195,196,1,0,0,0,196,194,1,0,0,0,196,197,
1,0,0,0,197,199,1,0,0,0,198,189,1,0,0,0,198,199,1,0,0,0,199,48,1,0,0,0,200,
201,5,112,0,0,201,202,5,114,0,0,202,203,5,105,0,0,203,204,5,110,0,0,204,
205,5,116,0,0,205,50,1,0,0,0,206,210,7,4,0,0,207,209,7,5,0,0,208,207,1,0,
0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,52,1,0,0,0,212,210,
1,0,0,0,213,214,5,42,0,0,214,54,1,0,0,0,215,216,5,47,0,0,216,56,1,0,0,0,
217,218,5,43,0,0,218,58,1,0,0,0,219,220,5,45,0,0,220,60,1,0,0,0,221,222,
5,38,0,0,222,223,5,38,0,0,223,62,1,0,0,0,224,225,5,124,0,0,225,226,5,124,
0,0,226,64,1,0,0,0,227,228,5,61,0,0,228,229,5,61,0,0,229,66,1,0,0,0,230,
231,5,33,0,0,231,232,5,61,0,0,232,68,1,0,0,0,233,234,5,60,0,0,234,70,1,0,
0,0,235,236,5,62,0,0,236,72,1,0,0,0,237,238,5,60,0,0,238,239,5,61,0,0,239,
74,1,0,0,0,240,241,5,62,0,0,241,242,5,61,0,0,242,76,1,0,0,0,243,245,5,13,
0,0,244,243,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,247,5,10,0,0,247,
248,1,0,0,0,248,249,6,38,0,0,249,78,1,0,0,0,250,252,7,6,0,0,251,250,1,0,
0,0,252,253,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,
256,6,39,0,0,256,80,1,0,0,0,257,258,5,47,0,0,258,259,5,47,0,0,259,263,1,
0,0,0,260,262,8,7,0,0,261,260,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,
264,1,0,0,0,264,266,1,0,0,0,265,263,1,0,0,0,266,267,6,40,0,0,267,82,1,0,
0,0,268,269,5,47,0,0,269,270,5,42,0,0,270,274,1,0,0,0,271,273,9,0,0,0,272,
271,1,0,0,0,273,276,1,0,0,0,274,275,1,0,0,0,274,272,1,0,0,0,275,277,1,0,
0,0,276,274,1,0,0,0,277,278,5,42,0,0,278,279,5,47,0,0,279,280,1,0,0,0,280,
281,6,41,0,0,281,84,1,0,0,0,14,0,168,174,179,185,187,191,196,198,210,244,
253,263,274,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class biesCLexer extends antlr4.Lexer {

    static grammarFileName = "biesC.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'('", "')'", "'let'", "'='", "'()'", "'=>'", 
                         "','", "'{'", "'}'", "'in'", "'const'", "'['", 
                         "']'", "'bool'", "'true'", "'false'", "'null'", 
                         "'input'", "'int'", "'str'", "'list'", "'len'", 
                         null, null, "'print'", null, "'*'", "'/'", "'+'", 
                         "'-'", "'&&'", "'||'", "'=='", "'!='", "'<'", "'>'", 
                         "'<='", "'>='" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, "BOOL", "TRUE", 
                          "FALSE", "NULL", "INPUT", "INT", "STR", "LIST", 
                          "LEN", "STRING", "NUMBER", "PRINT", "ID", "MULT", 
                          "DIV", "ADD", "SUB", "AND", "OR", "EQ", "NEQ", 
                          "LT", "GT", "LE", "GE", "NL", "WS", "COMMENT", 
                          "MULTILINE_COMMENT" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "BOOL", "TRUE", "FALSE", "NULL", "INPUT", "INT", "STR", 
                      "LIST", "LEN", "STRING", "NUMBER", "PRINT", "ID", 
                      "MULT", "DIV", "ADD", "SUB", "AND", "OR", "EQ", "NEQ", 
                      "LT", "GT", "LE", "GE", "NL", "WS", "COMMENT", "MULTILINE_COMMENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

biesCLexer.EOF = antlr4.Token.EOF;
biesCLexer.T__0 = 1;
biesCLexer.T__1 = 2;
biesCLexer.T__2 = 3;
biesCLexer.T__3 = 4;
biesCLexer.T__4 = 5;
biesCLexer.T__5 = 6;
biesCLexer.T__6 = 7;
biesCLexer.T__7 = 8;
biesCLexer.T__8 = 9;
biesCLexer.T__9 = 10;
biesCLexer.T__10 = 11;
biesCLexer.T__11 = 12;
biesCLexer.T__12 = 13;
biesCLexer.BOOL = 14;
biesCLexer.TRUE = 15;
biesCLexer.FALSE = 16;
biesCLexer.NULL = 17;
biesCLexer.INPUT = 18;
biesCLexer.INT = 19;
biesCLexer.STR = 20;
biesCLexer.LIST = 21;
biesCLexer.LEN = 22;
biesCLexer.STRING = 23;
biesCLexer.NUMBER = 24;
biesCLexer.PRINT = 25;
biesCLexer.ID = 26;
biesCLexer.MULT = 27;
biesCLexer.DIV = 28;
biesCLexer.ADD = 29;
biesCLexer.SUB = 30;
biesCLexer.AND = 31;
biesCLexer.OR = 32;
biesCLexer.EQ = 33;
biesCLexer.NEQ = 34;
biesCLexer.LT = 35;
biesCLexer.GT = 36;
biesCLexer.LE = 37;
biesCLexer.GE = 38;
biesCLexer.NL = 39;
biesCLexer.WS = 40;
biesCLexer.COMMENT = 41;
biesCLexer.MULTILINE_COMMENT = 42;



