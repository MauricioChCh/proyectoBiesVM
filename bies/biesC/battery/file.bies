/*
cd C:\Users\Eddy\Desktop\Proyecto Paradigmas de la Programación\bies\biesC && rmdir /s /q output && mkdir output && java -jar lib/antlr-4.13.1-complete.jar -Dlanguage=JavaScript ./grammar/biesC.g4 -no-listener -visitor -o output && cls && biesC ./tests/file.bies
*/
// Generated from ./grammar/biesC.g4 by ANTLR 4.9.2


//Print con primaryData
// print(666)

// //Print con expresiones
// print(654 + 1 + 11 * 2 / 9 - 2 + 5) //Se debe de corregir la precedencia de operadores
// //Asignaciones varias a variables
// print("Asignaciones a variables")
// let x1 = 12
// let x2 = 654 - 2
// let x3 = "Esto es un String"
// let x4 = ["Array"]
// let x5 = [[21], ["Array Anidado"], [3, 4, 5, 6, 7, 8, 9, 10]]
// let p = 3 + 2
// // //Print de variables
// print(x1)
// print(x2)
// print(x5)
// print(x4)
// print(x3)
// print(p)

// //estas las hace bien
print("Operaciones aritméticas")
print(654 + 1 + 11 * 2 / 9 - 2 + 5) 
let x = 2 ** 3 * 4 + 5        // 37
let y = 3 + 4 * 2 ** 3        // 35
let z = (3 + 4) * 2 ** 3      // 56
 print (x)
print (y)
print (z)


// //estas no
// print("Operaciones aritméticas de casos")
// let caso1 = 666-664//2 
// let caso2 = (4+1-2)//3 
// let caso3 = (5**5/(4+1))//625 
// let caso4 = (4*4/(3+1))//4 


// print(caso1)
// print(caso2)
// print(caso3)
// print(caso4)
// print(caso5)

// print("Operaciones aritméticas de casos")
// let prueba = 2+2
// let p1 = 5 //ni siquiera lo imprime
// let p2 = (654 + 1 + 11 * 2 / 9 - 2 + 5)
// let p3 = 3-2
// let p4 = 3*2
// let p5 = 3/2
// let p6 = 3**2
// let p7 = (3+3)

// print(prueba)
// print(p1)
// print(p2)
// print(p3)
// print(p4)
// print(p5)
// print(p6)
// print(p7)

//print(none)

// print(int("34"))
// print(str(666))
// print(bool(1))
// print(list("hello"))
// print(list(1111))


//---------------------------------------------------------------------------------------------------------------
/*
a[ 3 ]


LDV [1, 2, 3, "Hello World!", 5, 6, 7]
LDV 0
LTK

*/
// let sumList = (a, from, to, s) => if (from == to) then s else sumList(a, from + 1, to, a[from] + s)
// let sumListShort = (a, n) => sumList(a, 0, n, 0)
// let {const a = [1, 2, 3, 4, 5]
// 	 const from = 0
// 	 const to = 3 
// 	} in {
// 	print("*** Testing sumList("+ a + " ," + from + ", " + to + ") ***")
// 	print(sumList(a, from, to, 0) )
// 	print(sumListShort(a, to))
// }

//---------------------------------------------------------------------------------------------------------------

// Version compleja 0
// print("Testing helloworld Version 0 ***")
// print("Hello World!") 

//Version compleja 1
// let splash = () => print("Testing helloworld Version 1 ***")
// splash()
// print("Hello World!") 

// Version compleja 2
// let splash = (msg) => print(msg)
// let version = 666 - 664
// splash("Testing helloworld Version " + version + "***")
// print("Hello World!") 

// Version compleja 3
// let splash = (msg) => print(msg)
// let greetings = () => "Hello World!"
// let version = (4 + 1 - 2)
// splash("Testing helloworld Version " + version + " ***")
// print(greetings()) 

// Version compleja 4 let-in
// let {
// 	 const splash = (msg) => print(msg)
// 	 const greetings = () => "Hello World!"
// 	} in {
// 	    let version = 4 * 4 / (3 + 1)
// 		splash("Testing helloworld Version " + version + " ***")
// 		print(greetings()) 
// 	}

// Version compleja 5 let-in
// let {
// 		const splash = (msg) => print(msg)
// 		const greetings = () => 
// 		      let {const greet = input("Enter greeting>") 
// 			  } in 
// 			  if (len(greet) == 0 ) then "Hello World!" else greet
// 	} in {
// 	    let version = 5 ** 5 / (4 + 1)
// 		splash("Testing helloworld Version " + version + " ***")
// 		print(greetings())
//     }		

// Máximo entre dos números (<span style="color:red">** NUEVO **</span>)

// Version Extra compleja 6 Maximo entre dos números, lambda binaria
// let max = (x, y) => if (x > y) then x else y
// let {
// 	const x = 10
// 	const y = 20
// } in {
// 	print("*** Testing max("+ x + " ," + y + ") ***")
// 	print(max(x, y))
//}

// Máximo entre dos números lambda anidada (<span style="color:red">** NUEVO **</span>)

// Version Extra compleja 7 Maximo entre dos números, lambda anidada
// let max = x => y => if (x > y) then x else y
// let {
// 	const x = 10
// 	const y = 20
// } in {
// 	print("*** Testing max("+ x + " ," + y + ") ***")
// 	print(max(x)(y))
// }

// Acceso a un elemento de una lista (<span style="color:red">** NUEVO **</span>)

// Version Extra compleja 8 Acceso a un elemento de una lista
// let {const a = [1, 2, 3, "Hello World!", 5, 6, 7]
// 	} in {
// 	print("*** Testing List Access ("+ a + ") ***")
// 	print(a[ a[0] + 2 ])
// }
/*
// Suma de elementos en una lista (recursivo) (<span style="color:red">** NUEVO **</span>)

// Version Extra compleja 9 Largo de una lista (iterativo) lambda multi_argumento. Lambda derivada
let sumList = (a, from, to, s) => if (from == to) then s else sumList(a, from + 1, to, a[from] + s)
let sumListShort = (a, n) => sumList(a, 0, n, 0)
let {const a = [1, 2, 3, 4, 5]
	 const from = 0
	 const to = 3 
	} in {
	print("*** Testing sumList("+ a + " ," + from + ", " + to + ") ***")
	print(sumList(a, from, to, 0) )
	print(sumListShort(a, to))
}
*/


// Propuestas por chatGPT basadas en el código anterior:

/*

// Invertir una hilera (reverse, iterativo)

let reverseString = (str) => {
    let reversed = "";
    for (let i = str.length - 1; i >= 0; i--) {
        reversed += str[i];
    }
    return reversed;
};

print("*** Testing reverseString('hello') ***");
print(reverseString("hello")); // "olleh"

// Índice de una subhilera en una hilera (iterativo)

let indexOfSubstring = (str, substr) => {
    for (let i = 0; i <= str.length - substr.length; i++) {
        if (str.substring(i, i + substr.length) === substr) {
            return i;
        }
    }
    return -1; // Si no se encuentra
};

print("*** Testing indexOfSubstring('hello world', 'world') ***");
print(indexOfSubstring("hello world", "world")); // 6

// Chequeo de si una lista es palíndrome (iterativo)

let isPalindromeIterative = (arr) => {
    for (let i = 0, j = arr.length - 1; i < j; i++, j--) {
        if (arr[i] !== arr[j]) {
            return false;
        }
    }
    return true;
};

print("*** Testing isPalindromeIterative([1, 2, 3, 2, 1]) ***");
print(isPalindromeIterative([1, 2, 3, 2, 1])); // true

// Chequeo de si una lista es palíndrome (recursivo)

fun isPalindromeRecursive = (arr, start = 0, end = arr.length - 1) => {
    if (start >= end) return true;
    if (arr[start] !== arr[end]) return false;
    return isPalindromeRecursive(arr, start + 1, end - 1);
};

print("*** Testing isPalindromeRecursive([1, 2, 3, 2, 1]) ***");
print(isPalindromeRecursive([1, 2, 3, 2, 1])); // true

// Factorial iterativo

let factorialIterative = (n) => {
    let result = 1;
    for (let i = 1; i <= n; i++) {
        result *= i;
    }
    return result;
};

print("*** Testing factorialIterative(5) ***");
print(factorialIterative(5)); // 120

// Factorial recursivo

fun factorialRecursive = (n) => { if (n <= 1) then 1 else n * factorialRecursive(n - 1); }

print("*** Testing factorialRecursive(5) ***");
print(factorialRecursive(5)); // 120


// Fibonacci iterativo

let fibonacciIterative = (n) => {
    if (n <= 1) return n;
    let a = 0, b = 1;
    for (let i = 2; i <= n; i++) {
        [a, b] = [b, a + b];
    }
    return b;
};

print("*** Testing fibonacciIterative(7) ***");
print(fibonacciIterative(7)); // 13

*/