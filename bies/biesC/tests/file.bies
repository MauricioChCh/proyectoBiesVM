/*
cd C:\Users\Eddy\Desktop\Proyecto Paradigmas de la Programación\bies\biesC && rmdir /s /q output && mkdir output && java -jar lib/antlr-4.13.1-complete.jar -Dlanguage=JavaScript ./grammar/biesC.g4 -no-listener -visitor -o output && cls && biesC ./tests/file.bies
*/

//Print con primaryData
//print(666)

//Print con expresiones
//print(654 + 1 + 11 * 2 / 9 - 2 + 5) //Se debe de corregir la precedencia de operadores

//Asignaciones varias a variables
//let x1 = 12
//let x2 = 654
//let x3 = "Esto es un String"
//let x4 = ["Array"]
//let x5 = [[21], ["Array Anidado"], [3, 4, 5, 6, 7, 8, 9, 10]]


//print(x1)
//print(x2)
//print(x3)
//print(x4)
//print(x5)

//Funciones lambda


//let sub = (x, y) => add(x) - y
//let add = (x) => q + 1

let splash = (msg) => print(msg)
let version = 666 - 664
splash(version)
//print("Hello World!") 

/*

```js
// Version compleja 0
print("Testing helloworld Version 0 ***")
print("Hello World!") 
```

```js
// Version compleja 1
let splash = () => print("Testing helloworld Version 1 ***")
splash()
print("Hello World!") 
```

```js
// Version compleja 2
let splash = (msg) => print(msg)
let version = 666 - 664
splash("Testing helloworld Version " + version + "***")
print("Hello World!") 
```

```js
// Version compleja 3
let splash = (msg) => print(msg)
let greetings = () => "Hello World!"
let version = (4 + 1 - 2)
splash("Testing helloworld Version " + version + " ***")
print(greetings()) 
```

```js
// Version compleja 4 let-in
let {
	 const splash = (msg) => print(msg)
	 const greetings = () => "Hello World!"
	} in {
	    let version = 4 * 4 / (3 + 1)
		splash("Testing helloworld Version " + version + " ***")
		print(greetings()) 
	}
```

```js
// Version compleja 5 let-in
let {
		const splash = (msg) => print(msg)
		const greetings = () => 
		      let {const greet = input("Enter greeting>") 
			  } in 
			  if (len(greet) == 0 ) then "Hello World!" else greet
	} in {
	    let version = 5 ** 5 / (4 + 1)
		splash("Testing helloworld Version " + version + " ***")
		print(greetings())
    }		
```

* Máximo entre dos números (<span style="color:red">** NUEVO **</span>)
```js
// Version Extra compleja 6 Maximo entre dos números, lambda binaria
let max = (x, y) => if (x > y) then x else y
let {
	const x = 10
	const y = 20
} in {
	print("*** Testing max("+ x + " ," + y + ") ***")
	print(max(x, y))
}
```
* Máximo entre dos números lambda anidada (<span style="color:red">** NUEVO **</span>)
```js
// Version Extra compleja 7 Maximo entre dos números, lambda anidada
let max = x => y => if (x > y) then x else y
let {
	const x = 10
	const y = 20
} in {
	print("*** Testing max("+ x + " ," + y + ") ***")
	print(max(x)(y))
}
```
* Acceso a un elemento de una lista (<span style="color:red">** NUEVO **</span>)
```js
// Version Extra compleja 8 Acceso a un elemento de una lista
let {const a = [1, 2, 3, "Hello World!", 5, 6, 7]
	} in {
	print("*** Testing List Access ("+ a + ") ***")
	print(a[ a[0] + 2 ])
}
```
* Suma de elementos en una lista (recursivo) (<span style="color:red">** NUEVO **</span>)
```js
// Version Extra compleja 9 Largo de una lista (iterativo) lambda multi_argumento. Lambda derivada
let sumList = (a, from, to, s) => if (from == to) s else sumList(a, from + 1, to, a[from] + s)
let sumListShort = (a, n) => sumList(a, 0, n, 0)
let {const a = [1, 2, 3, 4, 5]
	 const from = 0
	 const to = 3 
	} in {
	print("*** Testing sumList("+ a + " ," + from + ", " + to + ") ***")
	print(sumList(a, from, to, 0) )
	print(sumListShort(a, to))
}
```

*/